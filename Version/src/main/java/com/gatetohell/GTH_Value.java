package com.gatetohell;

import java.awt.*;
import java.util.function.Consumer;
import java.util.function.Supplier;

public enum GTH_Value {
    M("M","–ë–µ–∑—É–º–Ω–æ—Å—Ç—å"   , new Color(255,213,0  ), (Integer Value) -> GateToHell.Madness       = Value, () -> GateToHell.Madness      , "–î–æ–±–∞–≤–ª—è–µ—Ç –≤ –º–∏—Ä –±–æ–ª—å—à–µ —Ö–∞–æ—Å–∞ –∏ –±–µ–∑—É–º–∏—è!"),
    S("S","–°—Ç—Ä–∞—à–Ω–æ—Å—Ç—å"   , new Color(18 ,9  ,9  ), (Integer Value) -> GateToHell.Scariness     = Value, () -> GateToHell.Scariness    , "–î–µ–ª–∞–µ—Ç –º–∏—Ä –±–æ–ª–µ–µ —Å—Ç—Ä–∞—à–Ω—ã–º –∏ —É–∂–∞—Å–∞—é—â–∏–º!"),
    V("V","–ü—É—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å"  , new Color(78 ,78 ,78 ), (Integer Value) -> GateToHell.Voidness      = Value, () -> GateToHell.Voidness     , "–î–µ–ª–∞–µ—Ç –º–∏—Ä –ø—É—Å—Ç–æ—Ç–Ω—ã–º, –±–æ–ª—å—à–µ –∫–∞—Ä–º–∞–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π –∏ –±–µ–∑–Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏!"),
    D("D","–î–µ–º–æ–Ω–∏—á–Ω–æ—Å—Ç—å" , new Color(255,89 ,0  ), (Integer Value) -> GateToHell.Hellness      = Value, () -> GateToHell.Hellness     , "–î–æ–±–∞–≤–ª—è–µ—Ç –≤ –º–∏—Ä —Ä–µ–ª–∏–≥–∏–∏, –¥–µ–º–æ–Ω—ã –∏ –∞–Ω–≥–µ–ª—ã"),
    B("B","–ì–ª–∏—á–Ω–æ—Å—Ç—å"    , new Color(255,31 ,237), (Integer Value) -> GateToHell.Glitchness    = Value, () -> GateToHell.Glitchness   , "–î–µ–ª–∞–µ—Ç –º–∏—Ä –±–æ–ª–µ–µ –≥–ª—é—á–Ω—ã–º –∏ –±–∞–≥–∞–Ω—ã–º"),
    G("G","–ñ–µ—Å—Ç–æ–∫–æ—Å—Ç—å"   , new Color(211,4  ,4  ), (Integer Value) -> GateToHell.Goreness      = Value, () -> GateToHell.Goreness     , "–î–æ–±–∞–≤–ª—è–µ—Ç –±–æ–ª—å—à–µ —Ä–∞—Å—á–ª–µ–Ω—ë–Ω–∫–∏ –∏ –∂–µ—Å—Ç–æ–∫–æ—Å—Ç–∏ –≤ –º–∏—Ä"),
    L("L","–õ–∏–º–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å", new Color(45 ,91 ,237), (Integer Value) -> GateToHell.Liminality    = Value, () -> GateToHell.Liminality   , "–î–µ–ª–∞–µ—Ç –º–∏—Ä –±–æ–ª–µ–µ –ª–∏–º–∏–Ω–∞–ª—å–Ω—ã–º"),
    W("W","–í—É–≤–∑–∫–æ—Ä-–Ω–æ—Å—Ç—å", new Color(122,58 ,0  ), (Integer Value) -> GateToHell.Woowzcoreness = Value, () -> GateToHell.Woowzcoreness, "–î–µ–ª–∞–µ—Ç –º–∏—Ä –ø–æ—Ö–æ–∂–∏–º –Ω–∞ Woowzcore"),
    A("A","–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ"  , new Color(0  ,73 ,108), (Integer Value) -> GateToHell.Loneliness    = Value, () -> GateToHell.Loneliness   , "–î–µ–ª–∞–µ—Ç –∏–≥—Ä–æ–∫–∞ –æ–¥–Ω–∏–º –∂–∏–≤—ã–º —Å—É—â–µ—Å—Ç–≤–æ–º –≤ –º–∏—Ä–µ"),
    H("H","–°—á–∞—Å—Ç—å–µ"      , new Color(71 ,255,29 ), (Integer Value) -> GateToHell.Happiness     = Value, () -> GateToHell.Happiness    , "–î–µ–ª–∞–µ—Ç –º–∏—Ä –±–æ–ª–µ–µ –≤–µ—Å—ë–ª—ã–º –∏–ª–∏ –≥—Ä—É—Å—Ç–Ω—ã–º"),
    R("R","–ú—É–∑—ã–∫–∞–ª—å–Ω–æ—Å—Ç—å", new Color(169,100,251), (Integer Value) -> GateToHell.Musical       = Value, () -> GateToHell.Musical      , "–î–µ–ª–∞–µ—Ç –º–∏—Ä –±–æ–ª–µ–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–º"),
    C("C","–í–∑–ª–æ–º–Ω–æ—Å—Ç—å"   , new Color(69 ,104,0  ), (Integer Value) -> GateToHell.Hackness      = Value, () -> GateToHell.Hackness     , "–î–µ–ª–∞–µ—Ç –∏–≥—Ä—É –±–æ–ª–µ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—â–µ–π —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º"),
    Q("Q","–ó–∞–≥–∞–¥–æ—á–Ω–æ—Å—Ç—å" , new Color(74 ,225,203), (Integer Value) -> GateToHell.Mystery       = Value, () -> GateToHell.Mystery      , "–î–µ–ª–∞–µ—Ç –º–∏—Ä –±–æ–ª–µ–µ –∑–∞–≥–∞–¥–æ—á–Ω—ã–º!"),
    U("U","–õ–∏—Ç—É–∏–∑–º"      , new Color(182,182,182), (Integer Value) -> GateToHell.Lituism       = Value, () -> GateToHell.Lituism      , "–õ–ò–¢–£–ò–ó–ú üòÅüòÅüòÅ");

    public static final int MAX =  1000;

    final String Code;
    final String Name;
    final Color  Color;
    final String Desc;
    private final Consumer<Integer> SetValueF;
    private final Supplier<Integer> GetValueF;

    GTH_Value(String Code, String Name, Color Color, Consumer<Integer> SetValueF, Supplier<Integer> GetValueF, String Desc){
        this.Code = Code; this.Name = Name; this.Color = Color; this.SetValueF = SetValueF; this.GetValueF = GetValueF; this.Desc = Desc;
    }

    public void SetValue(int Value){ this.SetValueF.accept(Value); if(GateToHell.Dev){ DevWindow.ValueProgressBars.get(this).SetValue(Value); } }
    public int  GetValue(         ){ return this.GetValueF.get() ; }
    public void AddValue(int Value){ SetValue(GetValue() + Value); }
    public void SubValue(int Value){ SetValue(GetValue() - Value); }
    public void MulValue(int Value){ SetValue(GetValue() * Value); }
    public void DivValue(int Value){ SetValue(GetValue() / Value); }
}
